AWSTemplateFormatVersion: 2010-09-09
Description: AWS Cloud WAN Inspection - East-West (VPCs and workloads)
Transform: 'AWS::LanguageExtensions'

Parameters:
  CoreNetworkARN:
    Type: String
  CoreNetworkId:
    Type: String
  LatestAmiId:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64"

Mappings:
  ProdVpcCIDR:
    us-east-1: 
      CIDR: 10.10.0.0/24
      EndpointSubneta: 10.10.0.0/28
      EndpointSubnetb: 10.10.0.16/28
      PrivateSubneta: 10.10.0.32/28
      PrivateSubnetb: 10.10.0.48/28
      CWANSubneta: 10.10.0.64/28
      CWANSubnetb: 10.10.0.80/28
    eu-west-1: 
      CIDR: 10.0.0.0/24
      EndpointSubneta: 10.0.0.0/28
      EndpointSubnetb: 10.0.0.16/28
      PrivateSubneta: 10.0.0.32/28
      PrivateSubnetb: 10.0.0.48/28
      CWANSubneta: 10.0.0.64/28
      CWANSubnetb: 10.0.0.80/28
    ap-southeast-2: 
      CIDR: 10.20.0.0/24
      EndpointSubneta: 10.20.0.0/28
      EndpointSubnetb: 10.20.0.16/28
      PrivateSubneta: 10.20.0.32/28
      PrivateSubnetb: 10.20.0.48/28
      CWANSubneta: 10.20.0.64/28
      CWANSubnetb: 10.20.0.80/28
    us-west-2:
      CIDR: 10.30.0.0/24
      EndpointSubneta: 10.30.0.0/28
      EndpointSubnetb: 10.30.0.16/28
      PrivateSubneta: 10.30.0.32/28
      PrivateSubnetb: 10.30.0.48/28
      CWANSubneta: 10.30.0.64/28
      CWANSubnetb: 10.30.0.80/28
  DevVpcCIDR:
    us-east-1: 
      CIDR: 10.10.1.0/24
      EndpointSubneta: 10.10.1.0/28
      EndpointSubnetb: 10.10.1.16/28
      PrivateSubneta: 10.10.1.32/28
      PrivateSubnetb: 10.10.1.48/28
      CWANSubneta: 10.10.1.64/28
      CWANSubnetb: 10.10.1.80/28
    eu-west-1: 
      CIDR: 10.0.1.0/24
      EndpointSubneta: 10.0.1.0/28
      EndpointSubnetb: 10.0.1.16/28
      PrivateSubneta: 10.0.1.32/28
      PrivateSubnetb: 10.0.1.48/28
      CWANSubneta: 10.0.1.64/28
      CWANSubnetb: 10.0.1.80/28
    ap-southeast-2: 
      CIDR: 10.20.1.0/24
      EndpointSubneta: 10.20.1.0/28
      EndpointSubnetb: 10.20.1.16/28
      PrivateSubneta: 10.20.1.32/28
      PrivateSubnetb: 10.20.1.48/28
      CWANSubneta: 10.20.1.64/28
      CWANSubnetb: 10.20.1.80/28
    us-west-2:
      CIDR: 10.30.1.0/24
      EndpointSubneta: 10.30.1.0/28
      EndpointSubnetb: 10.30.1.16/28
      PrivateSubneta: 10.30.1.32/28
      PrivateSubnetb: 10.30.1.48/28
      CWANSubneta: 10.30.1.64/28
      CWANSubnetb: 10.30.1.80/28
  InspectionVpcCIDR:
    us-east-1: 
      CIDR: 10.100.0.0/16
      EndpointSubneta: 10.100.0.0/28
      EndpointSubnetb: 10.100.0.16/28
      CWANSubneta: 10.100.0.32/28
      CWANSubnetb: 10.100.0.48/28
    eu-west-1: 
      CIDR: 10.100.0.0/16
      EndpointSubneta: 10.100.0.0/28
      EndpointSubnetb: 10.100.0.16/28
      CWANSubneta: 10.100.0.32/28
      CWANSubnetb: 10.100.0.48/28
    ap-southeast-2: 
      CIDR: 10.100.0.0/16
      EndpointSubneta: 10.100.0.0/28
      EndpointSubnetb: 10.100.0.16/28
      CWANSubneta: 10.100.0.32/28
      CWANSubnetb: 10.100.0.48/28
    us-west-2:
      CIDR: 10.100.0.0/16
      EndpointSubneta: 10.100.0.0/28
      EndpointSubnetb: 10.100.0.16/28
      CWANSubneta: 10.100.0.32/28
      CWANSubnetb: 10.100.0.48/28

Resources:
  # ---------- PRODUCTION VPC ----------
  ProductionVPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !FindInMap [ProdVpcCIDR, !Ref 'AWS::Region', CIDR]
      Tags: 
        - Key: Name
          Value: !Join
            - '-'
            - - prod-vpc
              - !Ref AWS::StackName
              - !Ref AWS::Region

  # For::Each iteration: per subnet type (Endpoint, Private, CWAN) and AZ (2 AZs)
  # Resources to create: 6 subnets, 6 route tables, 6 route table associations - obtaining AZ affinity
  'Fn::ForEach::ProductionSubnetTypes':
    - SubnetType
    - [Endpoint, Private, CWAN]
    - '${SubnetType}':
      'Fn::ForEach::AZ':
        - AvailabilityZone
        - [a, b]
          # Subnets
        - 'Production${SubnetType}Subnet${AvailabilityZone}':
            Type: AWS::EC2::Subnet
            Properties:
              VpcId: !Ref ProductionVPC
              AvailabilityZone: !Sub ${AWS::Region}${AvailabilityZone}
              CidrBlock: !FindInMap [ProdVpcCIDR, !Ref 'AWS::Region', 'Fn::Sub': '${SubnetType}Subnet${AvailabilityZone}']
              Tags:
                - Key: Name
                  Value: !Join
                    - '-'
                    - - !Sub prod-subnet-${SubnetType}-AZ${AvailabilityZone}
                      - !Ref AWS::StackName
          # Route Tables
          'Production${SubnetType}RouteTable${AvailabilityZone}':
            Type: AWS::EC2::RouteTable
            Properties:
              VpcId: !Ref ProductionVPC
              Tags: 
                - Key: Name
                  Value: !Join
                    - '-'
                    - - !Sub prod-rt-${SubnetType}-AZ${AvailabilityZone}
                      - !Ref AWS::StackName
          # Route Table associations
          'Production${SubnetType}RouteTableAssociation${AvailabilityZone}':
            Type: AWS::EC2::SubnetRouteTableAssociation
            Properties: 
              RouteTableId: !Ref
                'Fn::Sub': 'Production${SubnetType}RouteTable${AvailabilityZone}'
              SubnetId: !Ref
                'Fn::Sub': 'Production${SubnetType}Subnet${AvailabilityZone}'

  # For::Each iteration: per Availability Zone
  # VPC routes to 0.0.0.0/0 (via CWAN)
  # 'Fn::ForEach::ProductionVPCRoutes':
  #   - AvailabilityZone
  #   - [a, b]
  #   - 'ProdDefaultToCWANRoute${AvailabilityZone}':
  #       Type: AWS::EC2::Route
  #       Properties:
  #         RouteTableId: !Ref
  #           'Fn::Sub': 'ProductionPrivateRouteTable${AvailabilityZone}'
  #         DestinationCidrBlock: '0.0.0.0/0'
  #         CoreNetworkArn: !Ref CoreNetworkARN
  
  # AWS Cloud WAN attachment
  # ProdCWANAttachment:
  #   Type: AWS::NetworkManager::VpcAttachment
  #   Properties:
  #     CoreNetworkId: !Ref CoreNetworkId
  #     SubnetArns:
  #       - Fn::Join:
  #           - ""
  #           - - "arn:aws:ec2:"
  #             - Ref: AWS::Region
  #             - ":"
  #             - Ref: AWS::AccountId
  #             - ":subnet/"
  #             - Ref: ProductionCWANSubneta
  #       - Fn::Join:
  #           - ""
  #           - - "arn:aws:ec2:"
  #             - Ref: AWS::Region
  #             - ":"
  #             - Ref: AWS::AccountId
  #             - ":subnet/"
  #             - Ref: ProductionCWANSubnetb
  #     Tags:
  #       - Key: domain
  #         Value: prod
  #     VpcArn:
  #       Fn::Join:
  #         - ""
  #         - - "arn:"
  #           - Ref: AWS::Partition
  #           - ":ec2:"
  #           - Ref: AWS::Region
  #           - ":"
  #           - Ref: AWS::AccountId
  #           - ":vpc/"
  #           - Ref: ProductionVPC

  # Security Groups (Instances and EC2 Instance Connect endpoint)
  VPCProdInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Production VPC - Instance Security Group
      VpcId: !Ref ProductionVPC
  
  VPCProdInstanceSecurityGroupIngressICMP:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref VPCProdInstanceSecurityGroup
      Description: Allowing ICMP traffic
      IpProtocol: icmp
      FromPort: -1
      ToPort: -1
      CidrIp: 10.0.0.0/8
  
  VPCProdInstanceSecurityGroupIngressEIC:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref VPCProdInstanceSecurityGroup
      Description: Allowing ICMP traffic
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      DestinationSecurityGroupId: !Ref VPCProdEndpointSecurityGroup
  
  VPCProdEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Production VPC - Endpoints Security Group
      VpcId: !Ref ProductionVPC
  
  VPCProdEndpointSecurityGroupEgressEIC:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref VPCProdEndpointSecurityGroup
      Description: Allowing ICMP traffic
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      DestinationSecurityGroupId: !Ref VPCProdInstanceSecurityGroup
  
  # # # For::Each iteration: per AZ (2 AZs)
  # # # EC2 Instances
  # 'Fn::ForEach::ProductionInstances':
  #   - AvailabilityZone
  #   - [a, b]
  #   - 'ProdInstance${AvailabilityZone}':
  #     Type: AWS::EC2::Instance
  #     Properties:
  #       InstanceType: t3.micro
  #       SecurityGroupIds:
  #         - !Ref VPCProdInstanceSecurityGroup
  #       SubnetId: !Ref 
  #         'Fn::Sub': 'ProductionPrivateSubnet${AvailabilityZone}'
  #       ImageId: !Ref LatestAmiId
  #       # Tags:
  #       #   - Key: Name
  #       #     Value: !Join
  #       #       - '-'
  #       #       - - !Sub prod-instance-${AvailabilityZone}
  #       #         - !Ref AWS::StackName

  # ---------- DEVELOPMENT VPC ----------
  DevelopmentVPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !FindInMap [DevVpcCIDR, !Ref 'AWS::Region', CIDR]
      Tags: 
        - Key: Name
          Value: !Join
            - '-'
            - - dev-vpc
              - !Ref AWS::StackName
              - !Ref AWS::Region

  # For::Each iteration: per subnet type (Endpoint, Private, CWAN) and AZ (2 AZs)
  # Resources to create: 6 subnets, 6 route tables, 6 route table associations - obtaining AZ affinity
  'Fn::ForEach::DevelopmentSubnetTypes':
    - SubnetType
    - [Endpoint, Private, CWAN]
    - '${SubnetType}':
      'Fn::ForEach::AZ':
        - AvailabilityZone
        - [a, b]
          # Subnets
        - 'Development${SubnetType}Subnet${AvailabilityZone}':
            Type: AWS::EC2::Subnet
            Properties:
              VpcId: !Ref DevelopmentVPC
              AvailabilityZone: !Sub ${AWS::Region}${AvailabilityZone}
              CidrBlock: !FindInMap [DevVpcCIDR, !Ref 'AWS::Region', 'Fn::Sub': '${SubnetType}Subnet${AvailabilityZone}']
              Tags:
                - Key: Name
                  Value: !Join
                    - '-'
                    - - !Sub dev-subnet-${SubnetType}-AZ${AvailabilityZone}
                      - !Ref AWS::StackName
          # Route Tables
          'Development${SubnetType}RouteTable${AvailabilityZone}':
            Type: AWS::EC2::RouteTable
            Properties:
              VpcId: !Ref DevelopmentVPC
              Tags: 
                - Key: Name
                  Value: !Join
                    - '-'
                    - - !Sub dev-rt-${SubnetType}-AZ${AvailabilityZone}
                      - !Ref AWS::StackName
          # Route Table associations
          'Development${SubnetType}RouteTableAssociation${AvailabilityZone}':
            Type: AWS::EC2::SubnetRouteTableAssociation
            Properties: 
              RouteTableId: !Ref
                'Fn::Sub': 'Development${SubnetType}RouteTable${AvailabilityZone}'
              SubnetId: !Ref
                'Fn::Sub': 'Development${SubnetType}Subnet${AvailabilityZone}'
  
  # For::Each iteration: per Availability Zone
  # VPC routes to 0.0.0.0/0 (via CWAN)
  # 'Fn::ForEach::DevelopmentVPCRoutes':
  #   - AvailabilityZone
  #   - [a, b]
  #   - 'DevDefaultToCWANRoute${AvailabilityZone}':
  #       Type: AWS::EC2::Route
  #       Properties:
  #         RouteTableId: !Ref
  #           'Fn::Sub': 'DevelopmentPrivateRouteTable${AvailabilityZone}'
  #         DestinationCidrBlock: '0.0.0.0/0'
  #         CoreNetworkArn: !Ref CoreNetworkARN
  
  # # AWS Cloud WAN attachment
  # DevCWANAttachment:
  #   Type: AWS::NetworkManager::VpcAttachment
  #   Properties:
  #     CoreNetworkId: !Ref CoreNetworkId
  #     SubnetArns:
  #       - Fn::Join:
  #           - ""
  #           - - "arn:aws:ec2:"
  #             - Ref: AWS::Region
  #             - ":"
  #             - Ref: AWS::AccountId
  #             - ":subnet/"
  #             - Ref: DevelopmentCWANSubneta
  #       - Fn::Join:
  #           - ""
  #           - - "arn:aws:ec2:"
  #             - Ref: AWS::Region
  #             - ":"
  #             - Ref: AWS::AccountId
  #             - ":subnet/"
  #             - Ref: DevelopmentCWANSubnetb
  #     Tags:
  #       - Key: domain
  #         Value: nonprod
  #     VpcArn:
  #       Fn::Join:
  #         - ""
  #         - - "arn:"
  #           - Ref: AWS::Partition
  #           - ":ec2:"
  #           - Ref: AWS::Region
  #           - ":"
  #           - Ref: AWS::AccountId
  #           - ":vpc/"
  #           - Ref: DevelopmentVPC

  # Security Groups (Instances and EC2 Instance Connect endpoint)
  VPCDevInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Development VPC - Instance Security Group
      VpcId: !Ref DevelopmentVPC
  
  VPCDevInstanceSecurityGroupIngressICMP:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref VPCDevInstanceSecurityGroup
      Description: Allowing ICMP traffic
      IpProtocol: icmp
      FromPort: -1
      ToPort: -1
      CidrIp: 10.0.0.0/8
  
  VPCDevInstanceSecurityGroupIngressEIC:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref VPCDevInstanceSecurityGroup
      Description: Allowing ICMP traffic
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      DestinationSecurityGroupId: !Ref VPCDevEndpointSecurityGroup
  
  VPCDevEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Development VPC - Endpoints Security Group
      VpcId: !Ref DevelopmentVPC
  
  VPCDevEndpointSecurityGroupEgressEIC:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref VPCDevEndpointSecurityGroup
      Description: Allowing ICMP traffic
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      DestinationSecurityGroupId: !Ref VPCDevInstanceSecurityGroup
  
  # # # For::Each iteration: per AZ (2 AZs)
  # # # EC2 Instances
  # 'Fn::ForEach::DevelopmentInstances':
  #   - AvailabilityZone
  #   - [a, b]
  #   - 'ProdInstance${AvailabilityZone}':
  #     Type: AWS::EC2::Instance
  #     Properties:
  #       InstanceType: t3.micro
  #       SecurityGroupIds:
  #         - !Ref VPCProdInstanceSecurityGroup
  #       SubnetId: !Ref 
  #         'Fn::Sub': 'ProductionPrivateSubnet${AvailabilityZone}'
  #       ImageId: !Ref LatestAmiId
  #       # Tags:
  #       #   - Key: Name
  #       #     Value: !Join
  #       #       - '-'
  #       #       - - !Sub prod-instance-${AvailabilityZone}
  #       #         - !Ref AWS::StackName


  # ---------- INSPECTION VPC ----------
  InspectionVPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !FindInMap [InspectionVpcCIDR, !Ref 'AWS::Region', CIDR]
      Tags: 
        - Key: Name
          Value: !Join
            - '-'
            - - inspection-vpc
              - !Ref AWS::StackName
              - !Ref AWS::Region

  InspectionIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags: 
        - Key: Name
          Value: inspection-igw
  
  InspectionIGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InspectionIGW
      VpcId: !Ref InspectionVPC

  # For::Each iteration: per subnet type (Endpoint, Private, CWAN) and AZ (2 AZs)
  # Resources to create: 6 subnets, 6 route tables, 6 route table associations - obtaining AZ affinity
  'Fn::ForEach::InspectionSubnetTypes':
    - SubnetType
    - [Endpoint, CWAN]
    - '${SubnetType}':
      'Fn::ForEach::AZ':
        - AvailabilityZone
        - [a, b]
          # Subnets
        - 'Inspection${SubnetType}Subnet${AvailabilityZone}':
            Type: AWS::EC2::Subnet
            Properties:
              VpcId: !Ref InspectionVPC
              AvailabilityZone: !Sub ${AWS::Region}${AvailabilityZone}
              CidrBlock: !FindInMap [InspectionVpcCIDR, !Ref 'AWS::Region', 'Fn::Sub': '${SubnetType}Subnet${AvailabilityZone}']
              Tags:
                - Key: Name
                  Value: !Join
                    - '-'
                    - - !Sub insp-subnet-${SubnetType}-AZ${AvailabilityZone}
                      - !Ref AWS::StackName
          # Route Tables
          'Inspection${SubnetType}RouteTable${AvailabilityZone}':
            Type: AWS::EC2::RouteTable
            Properties:
              VpcId: !Ref InspectionVPC
              Tags: 
                - Key: Name
                  Value: !Join
                    - '-'
                    - - !Sub insp-rt-${SubnetType}-AZ${AvailabilityZone}
                      - !Ref AWS::StackName
          # Route Table associations
          'Inspection${SubnetType}RouteTableAssociation${AvailabilityZone}':
            Type: AWS::EC2::SubnetRouteTableAssociation
            Properties: 
              RouteTableId: !Ref
                'Fn::Sub': 'Inspection${SubnetType}RouteTable${AvailabilityZone}'
              SubnetId: !Ref
                'Fn::Sub': 'Inspection${SubnetType}Subnet${AvailabilityZone}'
  
  # For::Each iteration: per Availability Zone
  # 0.0.0.0/0 route from Endpoint subnets to CWAN
  'Fn::ForEach::InspectionVPCRoutes':
    - AvailabilityZone
    - [a, b]
    - 'EndpointToCWAN${AvailabilityZone}':
        Type: AWS::EC2::Route
        Properties:
          RouteTableId: !Ref
            'Fn::Sub': 'InspectionEndpointRouteTable${AvailabilityZone}'
          DestinationCidrBlock: '0.0.0.0/0'
          CoreNetworkArn: !Ref CoreNetworkARN

  # AWS Cloud WAN attachment
  # InspectionCWANAttachment:
  #   Type: AWS::NetworkManager::VpcAttachment
  #   Properties:
  #     CoreNetworkId: !Ref CoreNetworkId
  #     SubnetArns:
  #       - Fn::Join:
  #           - ""
  #           - - "arn:aws:ec2:"
  #             - Ref: AWS::Region
  #             - ":"
  #             - Ref: AWS::AccountId
  #             - ":subnet/"
  #             - Ref: DevelopmentCWANSubneta
  #       - Fn::Join:
  #           - ""
  #           - - "arn:aws:ec2:"
  #             - Ref: AWS::Region
  #             - ":"
  #             - Ref: AWS::AccountId
  #             - ":subnet/"
  #             - Ref: DevelopmentCWANSubnetb
  #     Tags:
  #       - Key: inspection
  #         Value: "true"
  #     VpcArn:
  #       Fn::Join:
  #         - ""
  #         - - "arn:"
  #           - Ref: AWS::Partition
  #           - ":ec2:"
  #           - Ref: AWS::Region
  #           - ":"
  #           - Ref: AWS::AccountId
  #           - ":vpc/"
  #           - Ref: DevelopmentVPC
  
  # Network Firewall resource
  NetworkFirewall:
    Type: AWS::NetworkFirewall::Firewall
    Properties:
      FirewallName: !Join
        - "-"
        - - "network-firewall"
          - !Ref AWS::Region
      FirewallPolicyArn: !GetAtt NetworkFirewallRulesPolicy.FirewallPolicyArn
      VpcId: !Ref InspectionVPC
      SubnetMappings:
        - SubnetId: !Ref InspectionEndpointSubneta
        - SubnetId: !Ref InspectionEndpointSubnetb
  
  # Firewall Policy
  NetworkFirewallRulesPolicy:
    Type: AWS::NetworkFirewall::FirewallPolicy
    Properties:
      FirewallPolicy:
        StatelessDefaultActions:
          - "aws:forward_to_sfe"
        StatelessFragmentDefaultActions:
          - "aws:forward_to_sfe"
        StatefulRuleGroupReferences:
          - ResourceArn: !GetAtt NetworkFirewallStatefulICMPAlert.RuleGroupArn
      FirewallPolicyName: !Join
        - "-"
        - - "firewall-policy"
          - !Ref AWS::Region
  
  # Stateful Rule Group - ICMP Alert
  NetworkFirewallStatefulICMPAlert:
    Type: AWS::NetworkFirewall::RuleGroup
    Properties:
      Capacity: 100
      RuleGroupName: ICMPAlert
      Type: STATEFUL
      Description: Alerting ICMP traffic
      RuleGroup:
        RulesSource:
          StatefulRules:
            - Action: ALERT
              RuleOptions:
                - Keyword: "sid:1" 
              Header:
                Protocol: ICMP
                Source: ANY
                Destination: ANY
                Direction: ANY
                DestinationPort: ANY
                SourcePort: ANY

  # Stateful Rule Group (PLACEHOLDER)


  # ---------- CUSTOM RESOURCE: VPC routes to Network Firewall (Inspection VPC) ----------  
  RouteCWANToFirewall1:
    Type: Custom::RouteTableEntry
    DependsOn:
      - FunctionLogGroup
    Properties:
      ServiceToken: !GetAtt FirewallRouteFunction.Arn
      FirewallArn: !GetAtt NetworkFirewall.FirewallArn
      SubnetAz: !GetAtt InspectionEndpointSubneta.AvailabilityZone
      DestinationCidr: "0.0.0.0/0"
      RouteTableId: !Ref InspectionCWANSubneta

  RouteCWANToFirewall2:
    Type: Custom::RouteTableEntry
    DependsOn:
      - FunctionLogGroup
    Properties:
      ServiceToken: !GetAtt FirewallRouteFunction.Arn
      FirewallArn: !GetAtt NetworkFirewall.FirewallArn
      SubnetAz: !GetAtt InspectionEndpointSubnetb.AvailabilityZone
      DestinationCidr: "0.0.0.0/0"
      RouteTableId: !Ref InspectionCWANSubnetb

  # Lambda functions to create routes to Firewall endpoints
  RouteFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: AllowLambdaVPC
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:CreateRoute
                  - ec2:UpdateRoute
                  - ec2:DeleteRoute
                Resource:
                  - !Sub arn:aws:ec2:*:*:route-table/*
              - Effect: Allow
                Action:
                  - network-firewall:DescribeFirewall
                Resource:
                  - !GetAtt NetworkFirewall.FirewallArn
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  FunctionLogGroup:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W84
            reason: Encryption not required for this log group
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: '/aws/lambda/VPCRouteFunctions'
      RetentionInDays: 7

  FirewallRouteFunction:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W58
            reason: CWL permissions granted by use of AWSLambdaBasicExecutionRole
          - id: W89
            reason: No requirement for this function to be in a VPC
          - id: W92
            reason: No requirement to limit simultaneous executions
    Type: AWS::Lambda::Function
    Properties:
      Description: Manage route table entry for CoreNetwork
      Runtime: python3.12
      Timeout: 10
      Role: !GetAtt RouteFunctionRole.Arn
      Handler: index.on_event
      Code:
        ZipFile: |-
          import logging
          from typing import Dict
          import boto3
          import cfnresponse

          logger = logging.getLogger(__name__)


          nfw = boto3.client("network-firewall")
          ec2 = boto3.client("ec2")
          response = {}

          def get_data(firewall_arn: str) -> Dict[str, str]:
              response = nfw.describe_firewall(FirewallArn=firewall_arn)
              return {
                  k: v["Attachment"]["EndpointId"]
                  for k, v in response["FirewallStatus"]["SyncStates"].items()
              }

          def create(event):
              logical_id: str = event["LogicalResourceId"]
              request_id: str = event["RequestId"]
              physical_resource_id = f'{logical_id}-{request_id.replace("-", "")}.txt'
              firewall_arn = event["ResourceProperties"]["FirewallArn"]
              subnet_az = event["ResourceProperties"]["SubnetAz"]
              destination_cidr = event["ResourceProperties"]["DestinationCidr"]
              route_table_id = event["ResourceProperties"]["RouteTableId"]

              endpoints = get_data(firewall_arn)
              ec2.create_route(
                  DestinationCidrBlock=destination_cidr,
                  RouteTableId=route_table_id,
                  VpcEndpointId=endpoints[subnet_az],
              )
              return physical_resource_id

          def update(event):
              logical_id: str = event["LogicalResourceId"]
              request_id: str = event["RequestId"]
              physical_resource_id = f'{logical_id}-{request_id.replace("-", "")}.txt'
              return physical_resource_id


          def delete(event):
              route_table_id = event["ResourceProperties"]["RouteTableId"]
              destination_cidr = event["ResourceProperties"]["DestinationCidr"]
              ec2.delete_route(DestinationCidrBlock=destination_cidr, RouteTableId=route_table_id)


          def on_event(event, context):
            if event["RequestType"] == "Create":
              physical_resource_id = create(event)
              cfnresponse.send(event,context,cfnresponse.SUCCESS, {})
              return
            elif event["RequestType"] == "Update":
              update(event),
              cfnresponse.send(event,context, cfnresponse.SUCCESS, {})
              return
            elif event["RequestType"] == "Delete":
              delete(event)
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
              return
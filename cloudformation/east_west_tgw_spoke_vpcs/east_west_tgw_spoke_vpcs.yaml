AWSTemplateFormatVersion: 2010-09-09
Description: AWS Cloud WAN Inspection - East-West - Spoke VPCs (TGW) & Inspection VPCs (Cloud WAN) (VPCs & Workloads)
Transform: 'AWS::LanguageExtensions'

Parameters:
  CoreNetworkArn:
    Type: String
  CoreNetworkId:
    Type: String
  LatestAmiId:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64"

Mappings:
  ProdVpcCIDR:
    us-east-1: 
      CIDR: 10.10.0.0/24
      EndpointSubneta: 10.10.0.0/28
      EndpointSubnetb: 10.10.0.16/28
      PrivateSubneta: 10.10.0.32/28
      PrivateSubnetb: 10.10.0.48/28
      TGWSubneta: 10.10.0.64/28
      TGWSubnetb: 10.10.0.80/28
    eu-west-1: 
      CIDR: 10.0.0.0/24
      EndpointSubneta: 10.0.0.0/28
      EndpointSubnetb: 10.0.0.16/28
      PrivateSubneta: 10.0.0.32/28
      PrivateSubnetb: 10.0.0.48/28
      TGWSubneta: 10.0.0.64/28
      TGWSubnetb: 10.0.0.80/28
    ap-southeast-2: 
      CIDR: 10.20.0.0/24
      EndpointSubneta: 10.20.0.0/28
      EndpointSubnetb: 10.20.0.16/28
      PrivateSubneta: 10.20.0.32/28
      PrivateSubnetb: 10.20.0.48/28
      TGWSubneta: 10.20.0.64/28
      TGWSubnetb: 10.20.0.80/28
  DevVpcCIDR:
    us-east-1: 
      CIDR: 10.10.1.0/24
      EndpointSubneta: 10.10.1.0/28
      EndpointSubnetb: 10.10.1.16/28
      PrivateSubneta: 10.10.1.32/28
      PrivateSubnetb: 10.10.1.48/28
      TGWSubneta: 10.10.1.64/28
      TGWSubnetb: 10.10.1.80/28
    eu-west-1: 
      CIDR: 10.0.1.0/24
      EndpointSubneta: 10.0.1.0/28
      EndpointSubnetb: 10.0.1.16/28
      PrivateSubneta: 10.0.1.32/28
      PrivateSubnetb: 10.0.1.48/28
      TGWSubneta: 10.0.1.64/28
      TGWSubnetb: 10.0.1.80/28
    ap-southeast-2: 
      CIDR: 10.20.1.0/24
      EndpointSubneta: 10.20.1.0/28
      EndpointSubnetb: 10.20.1.16/28
      PrivateSubneta: 10.20.1.32/28
      PrivateSubnetb: 10.20.1.48/28
      TGWSubneta: 10.20.1.64/28
      TGWSubnetb: 10.20.1.80/28
  InspectionVpcCIDR:
    us-east-1: 
      CIDR: 10.100.0.0/16
      EndpointSubneta: 10.100.0.0/28
      EndpointSubnetb: 10.100.0.16/28
      CWANSubneta: 10.100.0.32/28
      CWANSubnetb: 10.100.0.48/28
    eu-west-1: 
      CIDR: 10.100.0.0/16
      EndpointSubneta: 10.100.0.0/28
      EndpointSubnetb: 10.100.0.16/28
      CWANSubneta: 10.100.0.32/28
      CWANSubnetb: 10.100.0.48/28
    ap-southeast-2: 
      CIDR: 10.100.0.0/16
      EndpointSubneta: 10.100.0.0/28
      EndpointSubnetb: 10.100.0.16/28
      CWANSubneta: 10.100.0.32/28
      CWANSubnetb: 10.100.0.48/28
  TransitGateway:
    us-east-1:
      ASN: 64516
    eu-west-1:
      ASN: 64515
    ap-southeast-2:
      ASN: 64517
  CloudWANTag:
    Production:
      domain: production
    Development:
      domain: development
    ProdRoutes:
      domain: production

Resources:
  # ---------- AWS TRANSIT GATEWAY ----------
  TransitGateway:
    Type: AWS::EC2::TransitGateway
    Properties:
      AmazonSideAsn: !FindInMap [TransitGateway, !Ref 'AWS::Region', ASN]
      DefaultRouteTableAssociation: disable
      DefaultRouteTablePropagation: disable
      Description: !Join
        - '-'
        - - tgw
          - !Ref AWS::StackName
          - !Ref AWS::Region
      Tags: 
        - Key: Name
          Value: !Join
            - '-'
            - - tgw
              - !Ref AWS::StackName
              - !Ref AWS::Region
  
  # Cloud WAN - Transit Gateway peering
  TGWCWANPeering:
    Type: AWS::NetworkManager::TransitGatewayPeering
    Properties:
      CoreNetworkId: !Ref CoreNetworkId
      TransitGatewayArn: !Join
        - ":"
        - - "arn:aws:ec2"
          - !Ref AWS::Region
          - !Ref AWS::AccountId
          - !Join 
            - "/"
            - - "transit-gateway"
              - !GetAtt TransitGateway.Id
      Tags:
        - Key: Name
          Value: !Join
            - "-"
            - - "peering"
              - !Ref AWS::Region
 
  # # TGW Policy Table and peering association (Custom Resource)
  # TGWPolicyTable:
  #   Type: Custom::TGWPolicyTable
  #   DependsOn:
  #     - TGWCWANPeering
  #   Properties:
  #     ServiceToken: !GetAtt TGWPolicyTableFunction.Arn
  #     TransitGatewayId: !GetAtt TransitGateway.Id
  #     TGWPeeringAttachmentId: !GetAtt TGWCWANPeering.TransitGatewayPeeringAttachmentId

  # For::Each iteration: per TGW RT type (Production, Development, ProdRoutes)
  # Resources to create: TGW route tables, and Cloud WAN's RT attachments
  'Fn::ForEach::TGWRouteTableTypes':
    - TypeRT
    - [Production, Development, ProdRoutes]
    - '${TypeRT}TGWRouteTable':
        Type: AWS::EC2::TransitGatewayRouteTable
        Properties:
          Tags: 
            - Key: Name
              Value: !Sub tgw-rt-${TypeRT}
          TransitGatewayId: !Ref TransitGateway
      # '${TypeRT}TGWRouteTableAttachment':
      #   Type: AWS::NetworkManager::TransitGatewayRouteTableAttachment
      #   DependsOn:
      #     - TGWPolicyTable
      #   Properties:
      #     PeeringId: !Ref TGWCWANPeering
      #     TransitGatewayRouteTableArn: !Join
      #       - ":"
      #       - - "arn:aws:ec2"
      #         - !Ref AWS::Region
      #         - !Ref AWS::AccountId
      #         - !Join
      #           - "/"
      #           - - "transit-gateway-route-table"
      #             - !Ref
      #             'Fn::Sub': '${TypeRT}TGWRouteTable'
      #     Tags:
      #       - Key: domain
      #         Value: !FindInMap [CloudWANTag, !Sub '${TypeRT}', domain]

  # ---------- PRODUCTION VPC ----------
  ProductionVPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !FindInMap [ProdVpcCIDR, !Ref 'AWS::Region', CIDR]
      Tags: 
        - Key: Name
          Value: !Join
            - '-'
            - - prod-vpc
              - !Ref AWS::StackName
              - !Ref AWS::Region

  # For::Each iteration: per subnet type (Endpoint, Private, CWAN) and AZ (2 AZs)
  # Resources to create: 6 subnets, 6 route tables, 6 route table associations - obtaining AZ affinity
  'Fn::ForEach::ProductionSubnetTypes':
    - SubnetType
    - [Endpoint, Private, TGW]
    - '${SubnetType}':
      'Fn::ForEach::AZ':
        - AvailabilityZone
        - [a, b]
          # Subnets
        - 'Production${SubnetType}Subnet${AvailabilityZone}':
            Type: AWS::EC2::Subnet
            Properties:
              VpcId: !Ref ProductionVPC
              AvailabilityZone: !Sub ${AWS::Region}${AvailabilityZone}
              CidrBlock: !FindInMap [ProdVpcCIDR, !Ref 'AWS::Region', 'Fn::Sub': '${SubnetType}Subnet${AvailabilityZone}']
              Tags:
                - Key: Name
                  Value: !Join
                    - '-'
                    - - !Sub prod-subnet-${SubnetType}-AZ${AvailabilityZone}
                      - !Ref AWS::StackName
          # Route Tables
          'Production${SubnetType}RouteTable${AvailabilityZone}':
            Type: AWS::EC2::RouteTable
            Properties:
              VpcId: !Ref ProductionVPC
              Tags: 
                - Key: Name
                  Value: !Join
                    - '-'
                    - - !Sub prod-rt-${SubnetType}-AZ${AvailabilityZone}
                      - !Ref AWS::StackName
          # Route Table associations
          'Production${SubnetType}RouteTableAssociation${AvailabilityZone}':
            Type: AWS::EC2::SubnetRouteTableAssociation
            Properties: 
              RouteTableId: !Ref
                'Fn::Sub': 'Production${SubnetType}RouteTable${AvailabilityZone}'
              SubnetId: !Ref
                'Fn::Sub': 'Production${SubnetType}Subnet${AvailabilityZone}'

  # For::Each iteration: per Availability Zone
  # VPC routes to 0.0.0.0/0 (via TGW)
  'Fn::ForEach::ProductionVPCRoutes':
    - AvailabilityZone
    - [a, b]
    - 'ProdDefaultToTGWRoute${AvailabilityZone}':
        DependsOn:
          - ProdTGWAttachment
        Type: AWS::EC2::Route
        Properties:
          RouteTableId: !Ref
            'Fn::Sub': 'ProductionPrivateRouteTable${AvailabilityZone}'
          DestinationCidrBlock: '0.0.0.0/0'
          TransitGatewayId: !Ref TransitGateway
  
  # Transit Gateway attachment
  ProdTGWAttachment:
    Type: AWS::EC2::TransitGatewayAttachment
    Properties:
      SubnetIds: 
        - ProductionTGWSubneta
        - ProductionTGWSubnetb
      Tags: 
        - Key: Name
          Value: !Join
            - '-'
            - - tgw-prod-attachment
              - !Ref AWS::StackName
      TransitGatewayId: !Ref TransitGateway
      VpcId: !Ref ProductionVPC

  # Transit Gateway association & propagation
  ProdTGWAssociation:
    Type: AWS::EC2::TransitGatewayRouteTableAssociation
    Properties:
      TransitGatewayAttachmentId: !Ref ProdTGWAttachment
      TransitGatewayRouteTableId: !Ref ProductionTGWRouteTable
  
  ProdTGWPropagation:
    Type: AWS::EC2::TransitGatewayRouteTablePropagation
    Properties:
      TransitGatewayAttachmentId: !Ref ProdTGWAttachment
      TransitGatewayRouteTableId: !Ref ProdRoutesTGWRouteTable

  # Security Groups (Instances and EC2 Instance Connect endpoint)
  VPCProdInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Production VPC - Instance Security Group
      VpcId: !Ref ProductionVPC
  
  VPCProdInstanceSecurityGroupIngressICMP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref VPCProdInstanceSecurityGroup
      Description: Allowing ICMP traffic
      IpProtocol: icmp
      FromPort: -1
      ToPort: -1
      CidrIp: 10.0.0.0/8
  
  VPCProdInstanceSecurityGroupIngressEIC:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref VPCProdInstanceSecurityGroup
      Description: Allowing EIC connection
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId: !Ref VPCProdEndpointSecurityGroup
  
  VPCProdInstanceSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref VPCProdInstanceSecurityGroup
      Description: Allowing egress traffic
      IpProtocol: -1
      CidrIp: 0.0.0.0/0

  VPCProdEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Production VPC - Endpoints Security Group
      VpcId: !Ref ProductionVPC
  
  VPCProdEndpointSecurityGroupEgressEIC:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref VPCProdEndpointSecurityGroup
      Description: Allowing EIC connection
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      DestinationSecurityGroupId: !Ref VPCProdInstanceSecurityGroup
  
  # # For::Each iteration: per AZ (2 AZs)
  # # EC2 Instances
  'Fn::ForEach::ProductionInstances':
    - AvailabilityZone
    - [a, b]
    - 'ProdInstance${AvailabilityZone}':
        Type: AWS::EC2::Instance
        Properties:
          InstanceType: t3.micro
          SecurityGroupIds:
            - !Ref VPCProdInstanceSecurityGroup
          SubnetId: !Ref 
            'Fn::Sub': 'ProductionPrivateSubnet${AvailabilityZone}'
          ImageId: !Ref LatestAmiId
          Tags:
            - Key: Name
              Value: !Join
                - '-'
                - - !Sub prod-instance-${AvailabilityZone}
                  - !Ref AWS::StackName
  
  # EC2 Instance Connect Endpoint
  ProdEICEndpoint:
    Type: AWS::EC2::InstanceConnectEndpoint
    Properties:
      PreserveClientIp: false
      SecurityGroupIds: 
        - !Ref VPCProdEndpointSecurityGroup
      SubnetId: !Ref ProductionEndpointSubneta
      Tags: 
        - Key: Name
          Value : !Join
            - '-'
            - - !Sub prod-eic
              - !Ref AWS::StackName

  # ---------- DEVELOPMENT VPC ----------
  DevelopmentVPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !FindInMap [DevVpcCIDR, !Ref 'AWS::Region', CIDR]
      Tags: 
        - Key: Name
          Value: !Join
            - '-'
            - - dev-vpc
              - !Ref AWS::StackName
              - !Ref AWS::Region

  # For::Each iteration: per subnet type (Endpoint, Private, CWAN) and AZ (2 AZs)
  # Resources to create: 6 subnets, 6 route tables, 6 route table associations - obtaining AZ affinity
  'Fn::ForEach::DevelopmentSubnetTypes':
    - SubnetType
    - [Endpoint, Private, TGW]
    - '${SubnetType}':
      'Fn::ForEach::AZ':
        - AvailabilityZone
        - [a, b]
          # Subnets
        - 'Development${SubnetType}Subnet${AvailabilityZone}':
            Type: AWS::EC2::Subnet
            Properties:
              VpcId: !Ref DevelopmentVPC
              AvailabilityZone: !Sub ${AWS::Region}${AvailabilityZone}
              CidrBlock: !FindInMap [DevVpcCIDR, !Ref 'AWS::Region', 'Fn::Sub': '${SubnetType}Subnet${AvailabilityZone}']
              Tags:
                - Key: Name
                  Value: !Join
                    - '-'
                    - - !Sub dev-subnet-${SubnetType}-AZ${AvailabilityZone}
                      - !Ref AWS::StackName
          # Route Tables
          'Development${SubnetType}RouteTable${AvailabilityZone}':
            Type: AWS::EC2::RouteTable
            Properties:
              VpcId: !Ref DevelopmentVPC
              Tags: 
                - Key: Name
                  Value: !Join
                    - '-'
                    - - !Sub dev-rt-${SubnetType}-AZ${AvailabilityZone}
                      - !Ref AWS::StackName
          # Route Table associations
          'Development${SubnetType}RouteTableAssociation${AvailabilityZone}':
            Type: AWS::EC2::SubnetRouteTableAssociation
            Properties: 
              RouteTableId: !Ref
                'Fn::Sub': 'Development${SubnetType}RouteTable${AvailabilityZone}'
              SubnetId: !Ref
                'Fn::Sub': 'Development${SubnetType}Subnet${AvailabilityZone}'
  
  # For::Each iteration: per Availability Zone
  # VPC routes to 0.0.0.0/0 (via TGW)
  'Fn::ForEach::DevelopmentVPCRoutes':
    - AvailabilityZone
    - [a, b]
    - 'DevDefaultToTGWRoute${AvailabilityZone}':
        DependsOn:
          - DevTGWAttachment
        Type: AWS::EC2::Route
        Properties:
          RouteTableId: !Ref
            'Fn::Sub': 'DevelopmentPrivateRouteTable${AvailabilityZone}'
          DestinationCidrBlock: '0.0.0.0/0'
          TransitGatewayId: !Ref TransitGateway
  
  # Transit Gateway attachment
  DevTGWAttachment:
    Type: AWS::EC2::TransitGatewayAttachment
    Properties:
      SubnetIds: 
        - DevelopmentTGWSubneta
        - DevelopmentTGWSubnetb
      Tags: 
        - Key: Name
          Value: !Join
            - '-'
            - - tgw-dev-attachment
              - !Ref AWS::StackName
      TransitGatewayId: !Ref TransitGateway
      VpcId: !Ref DevelopmentVPC

  # Transit Gateway association & propagation
  DevTGWAssociation:
    Type: AWS::EC2::TransitGatewayRouteTableAssociation
    Properties:
      TransitGatewayAttachmentId: !Ref DevTGWAttachment
      TransitGatewayRouteTableId: !Ref DevelopmentTGWRouteTable
  
  DevTGWPropagation:
    Type: AWS::EC2::TransitGatewayRouteTablePropagation
    Properties:
      TransitGatewayAttachmentId: !Ref DevTGWAttachment
      TransitGatewayRouteTableId: !Ref DevelopmentTGWRouteTable
  
  # Security Groups (Instances and EC2 Instance Connect endpoint)
  VPCDevInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Development VPC - Instance Security Group
      VpcId: !Ref DevelopmentVPC
  
  VPCDevInstanceSecurityGroupIngressICMP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref VPCDevInstanceSecurityGroup
      Description: Allowing ICMP traffic
      IpProtocol: icmp
      FromPort: -1
      ToPort: -1
      CidrIp: 10.0.0.0/8
  
  VPCDevInstanceSecurityGroupIngressEIC:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref VPCDevInstanceSecurityGroup
      Description: Allowing EIC connection
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId: !Ref VPCDevEndpointSecurityGroup
  
  VPCDevInstanceSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref VPCDevInstanceSecurityGroup
      Description: Allowing egress traffic
      IpProtocol: -1
      CidrIp: 0.0.0.0/0

  VPCDevEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Development VPC - Endpoints Security Group
      VpcId: !Ref DevelopmentVPC
  
  VPCDevEndpointSecurityGroupEgressEIC:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref VPCDevEndpointSecurityGroup
      Description: Allowing EIC connection
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      DestinationSecurityGroupId: !Ref VPCDevInstanceSecurityGroup
  
  # # For::Each iteration: per AZ (2 AZs)
  # # EC2 Instances
  'Fn::ForEach::DevelopmentInstances':
    - AvailabilityZone
    - [a, b]
    - 'DevInstance${AvailabilityZone}':
        Type: AWS::EC2::Instance
        Properties:
          InstanceType: t3.micro
          SecurityGroupIds:
            - !Ref VPCDevInstanceSecurityGroup
          SubnetId: !Ref 
            'Fn::Sub': 'DevelopmentPrivateSubnet${AvailabilityZone}'
          ImageId: !Ref LatestAmiId
          Tags:
            - Key: Name
              Value: !Join
                - '-'
                - - !Sub dev-instance-${AvailabilityZone}
                  - !Ref AWS::StackName
  
  # EC2 Instance Connect Endpoint
  DevEICEndpoint:
    Type: AWS::EC2::InstanceConnectEndpoint
    Properties:
      PreserveClientIp: false
      SecurityGroupIds: 
        - !Ref VPCDevEndpointSecurityGroup
      SubnetId: !Ref DevelopmentEndpointSubneta
      Tags: 
        - Key: Name
          Value : !Join
            - '-'
            - - !Sub dev-eic
              - !Ref AWS::StackName

  # ---------- INSPECTION VPC ----------
  InspectionVPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !FindInMap [InspectionVpcCIDR, !Ref 'AWS::Region', CIDR]
      Tags: 
        - Key: Name
          Value: !Join
            - '-'
            - - inspection-vpc
              - !Ref AWS::StackName
              - !Ref AWS::Region

  # For::Each iteration: per subnet type (Endpoint, Private, CWAN) and AZ (2 AZs)
  # Resources to create: 6 subnets, 6 route tables, 6 route table associations - obtaining AZ affinity
  'Fn::ForEach::InspectionSubnetTypes':
    - SubnetType
    - [Endpoint, CWAN]
    - '${SubnetType}':
      'Fn::ForEach::AZ':
        - AvailabilityZone
        - [a, b]
          # Subnets
        - 'Inspection${SubnetType}Subnet${AvailabilityZone}':
            Type: AWS::EC2::Subnet
            Properties:
              VpcId: !Ref InspectionVPC
              AvailabilityZone: !Sub ${AWS::Region}${AvailabilityZone}
              CidrBlock: !FindInMap [InspectionVpcCIDR, !Ref 'AWS::Region', 'Fn::Sub': '${SubnetType}Subnet${AvailabilityZone}']
              Tags:
                - Key: Name
                  Value: !Join
                    - '-'
                    - - !Sub insp-subnet-${SubnetType}-AZ${AvailabilityZone}
                      - !Ref AWS::StackName
          # Route Tables
          'Inspection${SubnetType}RouteTable${AvailabilityZone}':
            Type: AWS::EC2::RouteTable
            Properties:
              VpcId: !Ref InspectionVPC
              Tags: 
                - Key: Name
                  Value: !Join
                    - '-'
                    - - !Sub insp-rt-${SubnetType}-AZ${AvailabilityZone}
                      - !Ref AWS::StackName
          # Route Table associations
          'Inspection${SubnetType}RouteTableAssociation${AvailabilityZone}':
            Type: AWS::EC2::SubnetRouteTableAssociation
            Properties: 
              RouteTableId: !Ref
                'Fn::Sub': 'Inspection${SubnetType}RouteTable${AvailabilityZone}'
              SubnetId: !Ref
                'Fn::Sub': 'Inspection${SubnetType}Subnet${AvailabilityZone}'
  
  # For::Each iteration: per Availability Zone
  # 0.0.0.0/0 route from Endpoint subnets to CWAN
  'Fn::ForEach::InspectionVPCRoutes':
    - AvailabilityZone
    - [a, b]
    - 'DefaultEndpointToCWAN${AvailabilityZone}':
        DependsOn:
          - InspectionCWANAttachment
        Type: AWS::EC2::Route
        Properties:
          RouteTableId: !Ref
            'Fn::Sub': 'InspectionEndpointRouteTable${AvailabilityZone}'
          DestinationCidrBlock: '0.0.0.0/0'
          CoreNetworkArn: !Ref CoreNetworkArn

  # AWS Cloud WAN attachment
  InspectionCWANAttachment:
    Type: AWS::NetworkManager::VpcAttachment
    Properties:
      CoreNetworkId: !Ref CoreNetworkId
      SubnetArns:
        - Fn::Join:
            - ""
            - - "arn:aws:ec2:"
              - Ref: AWS::Region
              - ":"
              - Ref: AWS::AccountId
              - ":subnet/"
              - Ref: InspectionCWANSubneta
        - Fn::Join:
            - ""
            - - "arn:aws:ec2:"
              - Ref: AWS::Region
              - ":"
              - Ref: AWS::AccountId
              - ":subnet/"
              - Ref: InspectionCWANSubnetb
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - inspection-attachment
              - !Ref AWS::StackName
              - !Ref AWS::Region
        - Key: inspection
          Value: "true"
      VpcArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":ec2:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":vpc/"
            - Ref: InspectionVPC
  
  # Network Firewall resource
  NetworkFirewall:
    Type: AWS::NetworkFirewall::Firewall
    Properties:
      FirewallName: !Join
        - "-"
        - - "network-firewall"
          - !Ref AWS::Region
      FirewallPolicyArn: !GetAtt NetworkFirewallRulesPolicy.FirewallPolicyArn
      VpcId: !Ref InspectionVPC
      SubnetMappings:
        - SubnetId: !Ref InspectionEndpointSubneta
        - SubnetId: !Ref InspectionEndpointSubnetb
  
  # Firewall Policy
  NetworkFirewallRulesPolicy:
    Type: AWS::NetworkFirewall::FirewallPolicy
    Properties:
      FirewallPolicy:
        StatelessDefaultActions:
          - "aws:forward_to_sfe"
        StatelessFragmentDefaultActions:
          - "aws:forward_to_sfe"
        StatelessRuleGroupReferences:
          - Priority: 10
            ResourceArn: !GetAtt NetworkFirewallStatelessDropRemote.RuleGroupArn
        StatefulEngineOptions:
          RuleOrder: STRICT_ORDER
        StatefulDefaultActions:
          - "aws:drop_strict"
          - "aws:alert_strict"
        StatefulRuleGroupReferences:
          - Priority: 10
            ResourceArn: !GetAtt NetworkFirewallStatefulAllowDomains.RuleGroupArn
      FirewallPolicyName: !Join
        - "-"
        - - "firewall-policy"
          - !Ref AWS::Region
  
  # Stateless Rule Group - Dropping any SSH connection
  NetworkFirewallStatelessDropRemote:
    Type: AWS::NetworkFirewall::RuleGroup
    Properties:
      Capacity: 2
      RuleGroupName: !Join
        - "-"
        - - "drop-remote"
          - !Ref AWS::StackName
      Description: Drop remote SSH connections
      Type: STATELESS
      RuleGroup:
        RulesSource:
          StatelessRulesAndCustomActions:
            StatelessRules:
              - Priority: 1
                RuleDefinition:
                  MatchAttributes:
                    Protocols:
                      - 6
                    Sources:
                      - AddressDefinition: 0.0.0.0/0
                    SourcePorts:
                      - FromPort: 22
                        ToPort: 22
                    Destinations:
                      - AddressDefinition: 0.0.0.0/0
                    DestinationPorts:
                      - FromPort: 22
                        ToPort: 22
                  Actions:
                    - "aws:drop"

  # Stateful Rule Group - ICMP Alert
  NetworkFirewallStatefulAllowDomains:
    Type: AWS::NetworkFirewall::RuleGroup
    Properties:
      Capacity: 100
      RuleGroupName: !Join
        - "-"
        - - "allow-domain"
          - !Ref AWS::StackName
      Description: Allowing domains
      Type: STATEFUL
      RuleGroup:
        StatefulRuleOptions:
          RuleOrder: STRICT_ORDER
        RulesSource:
          RulesString: |-
            alert icmp any any -> any any (msg: "Alerting traffic passing through firewall"; sid:1; rev:1;)
            pass icmp any any -> any any (msg: "Allowing ICMP packets"; sid:2; rev:1;)

  # ---------- CUSTOM RESOURCE: VPC routes to Network Firewall (Inspection VPC) ----------  
  # Default routes from CWAN subnets via the Firewall endpoints
  RouteCWANToFirewall1:
    Type: Custom::RouteTableEntry
    DependsOn:
      - FunctionLogGroup
    Properties:
      ServiceToken: !GetAtt FirewallRouteFunction.Arn
      FirewallArn: !GetAtt NetworkFirewall.FirewallArn
      SubnetAz: !GetAtt InspectionEndpointSubneta.AvailabilityZone
      DestinationCidr: "0.0.0.0/0"
      RouteTableId: !Ref InspectionCWANRouteTablea

  RouteCWANToFirewall2:
    Type: Custom::RouteTableEntry
    DependsOn:
      - FunctionLogGroup
    Properties:
      ServiceToken: !GetAtt FirewallRouteFunction.Arn
      FirewallArn: !GetAtt NetworkFirewall.FirewallArn
      SubnetAz: !GetAtt InspectionEndpointSubnetb.AvailabilityZone
      DestinationCidr: "0.0.0.0/0"
      RouteTableId: !Ref InspectionCWANRouteTableb

  # Lambda functions to create routes to Firewall endpoints
  RouteFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: AllowLambdaVPC
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:CreateRoute
                  - ec2:UpdateRoute
                  - ec2:DeleteRoute
                Resource:
                  - !Sub arn:aws:ec2:*:*:route-table/*
              - Effect: Allow
                Action:
                  - network-firewall:DescribeFirewall
                Resource:
                  - !GetAtt NetworkFirewall.FirewallArn
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  FunctionLogGroup:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W84
            reason: Encryption not required for this log group
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: '/aws/lambda/VPCRouteFunctions'
      RetentionInDays: 7

  FirewallRouteFunction:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W58
            reason: CWL permissions granted by use of AWSLambdaBasicExecutionRole
          - id: W89
            reason: No requirement for this function to be in a VPC
          - id: W92
            reason: No requirement to limit simultaneous executions
    Type: AWS::Lambda::Function
    Properties:
      Description: Manage route table entry for CoreNetwork
      Runtime: python3.12
      Timeout: 10
      Role: !GetAtt RouteFunctionRole.Arn
      Handler: index.on_event
      Code:
        ZipFile: |-
          import logging
          from typing import Dict
          import boto3
          import cfnresponse

          logger = logging.getLogger(__name__)


          nfw = boto3.client("network-firewall")
          ec2 = boto3.client("ec2")
          response = {}

          def get_data(firewall_arn: str) -> Dict[str, str]:
              response = nfw.describe_firewall(FirewallArn=firewall_arn)
              return {
                  k: v["Attachment"]["EndpointId"]
                  for k, v in response["FirewallStatus"]["SyncStates"].items()
              }

          def create(event):
              logical_id: str = event["LogicalResourceId"]
              request_id: str = event["RequestId"]
              physical_resource_id = f'{logical_id}-{request_id.replace("-", "")}.txt'
              firewall_arn = event["ResourceProperties"]["FirewallArn"]
              subnet_az = event["ResourceProperties"]["SubnetAz"]
              destination_cidr = event["ResourceProperties"]["DestinationCidr"]
              route_table_id = event["ResourceProperties"]["RouteTableId"]

              endpoints = get_data(firewall_arn)
              ec2.create_route(
                  DestinationCidrBlock=destination_cidr,
                  RouteTableId=route_table_id,
                  VpcEndpointId=endpoints[subnet_az],
              )
              return physical_resource_id

          def update(event):
              logical_id: str = event["LogicalResourceId"]
              request_id: str = event["RequestId"]
              physical_resource_id = f'{logical_id}-{request_id.replace("-", "")}.txt'
              return physical_resource_id


          def delete(event):
              route_table_id = event["ResourceProperties"]["RouteTableId"]
              destination_cidr = event["ResourceProperties"]["DestinationCidr"]
              ec2.delete_route(DestinationCidrBlock=destination_cidr, RouteTableId=route_table_id)


          def on_event(event, context):
            if event["RequestType"] == "Create":
              physical_resource_id = create(event)
              cfnresponse.send(event,context,cfnresponse.SUCCESS, {})
              return
            elif event["RequestType"] == "Update":
              update(event),
              cfnresponse.send(event,context, cfnresponse.SUCCESS, {})
              return
            elif event["RequestType"] == "Delete":
              delete(event)
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
              return
  
  # ---------- CUSTOM RESOURCE: TGW POLICY TABLE AND PEERING ASSOCIATION ----------
  TGWPolicyTableCustomResourcesRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: AllowTGWNetworkManager
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ec2:CreateTransitGatewayPolicyTable"
                  - "ec2:AssociateTransitGatewayPolicyTable"
                  - "ec2:DisassociateTransitGatewayPolicyTable"
                  - "ec2:DeleteTransitGatewayPolicyTable"
                  - "ec2:DescribeTransitGatewayPolicyTables"
                  - "ec2:DescribeRegions"
                  - "ec2:GetTransitGatewayPolicyTableAssociations"
                  - "ec2:GetTransitGatewayPolicyTableEntries"
                  - "ec2:CreateTags"
                Resource:
                  - "*"
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  TGWPolicyTableFunctionLogGroup:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W84
            reason: Encryption not required for this log group
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${TGWPolicyTableFunction}
      RetentionInDays: 7

  TGWPolicyTableFunction:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W58
            reason: CWL permissions granted by use of AWSLambdaBasicExecutionRole
          - id: W89
            reason: No requirement for this function to be in a VPC
          - id: W92
            reason: No requirement to limit simultaneous executions
    Type: AWS::Lambda::Function
    Properties:
      Description: Create TGW Policy Table and associate it to Cloud WAN peering
      Runtime: python3.12
      Timeout: 900
      Role: !GetAtt TGWPolicyTableCustomResourcesRole.Arn
      Handler: index.lambda_handler
      Code:
        ZipFile: |-
          import sys
          import subprocess
          from pip._internal import main

          # pip3 install - update boto3 to latest version
          subprocess.call('pip3 install -I -q boto3 -t /tmp/ --no-cache-dir --disable-pip-version-check'.split(), stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
          sys.path.insert(1, '/tmp/')

          import boto3
          import os
          import logging
          import json
          import time
          import cfnresponse
          from botocore.config import Config
          from botocore.exceptions import ClientError

          log = logging.getLogger("handler")
          log.setLevel(logging.INFO)

          def lambda_handler(event, context):
              try:
                  log.info("Received event: %s", json.dumps(event))
                  log.info(boto3.__version__)

                  # We obtain the parameters from the Custom Resource Event
                  action = event["RequestType"]
                  tgw_id = event["ResourceProperties"]["TransitGatewayId"]
                  tgw_peering_attachment_id = event["ResourceProperties"]["TGWPeeringAttachmentId"]
                  # We obtain the AWS Region
                  region = os.environ['AWS_REGION']

                  # boto3 client configuration
                  ec2 = boto3.client("ec2")
                  
                  response = {}
                  
                  # Actions to perform if we are creating the resources
                  if action == "Create":
                      log.info("Creating transit gateway policy table for transit gateway %s", tgw_id)
                      response = create_tgw_policytable(ec2, tgw_id, tgw_peering_attachment_id, region)
                      
                  if action == "Delete":
                      log.info("Deleting transit gateway policy table for transit gateway %s", tgw_id)
                      response = delete_tgw_policytable(ec2, tgw_id, tgw_peering_attachment_id, region)
                      
                  if action == "Update":
                      log.info("Updating transit gateway policy table for tgw %s", tgw_id)
                      # Getting the previous values of the TGW and Core Network
                      old_tgw_peering_attachment_id = event["OldResourceProperties"]["TGWPeeringAttachmentId"]
                      # Update TGW Policy Table association
                      response = update_tgw_peering_attachment(ec2, tgw_id, old_tgw_peering_attachment_id, tgw_peering_attachment_id, region)
                      
                  if "Return" in response:
                      if response["Return"]:
                          cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                          return
                      cfnresponse.send(
                          event, context, cfnresponse.FAILED, {}, reason="API request failed"
                      )
                      return
                  
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, response)
                  log.info(response)
              
              except:
                  log.exception("whoops")
                  cfnresponse.send(
                      event,
                      context,
                      cfnresponse.FAILED,
                      {},
                      reason="Caught exception, check logs",
                  )

          def create_tgw_policytable(ec2, tgw_id, tgw_peering_attachment_id, region):
              try:
                  # Initialization of the response
                  response = {}
                  
                  # Create TGW policy table
                  tgw_policy_table_id = ec2.create_transit_gateway_policy_table(
                      TransitGatewayId=tgw_id,
                      TagSpecifications=[
                          {
                              'ResourceType': 'transit-gateway-policy-table',
                              'Tags': [
                                  {
                                      'Key': 'Name',
                                      'Value': f'tgw-policy-table-{region}'
                                  },
                              ]
                          },
                      ]
                  )['TransitGatewayPolicyTable']['TransitGatewayPolicyTableId']
                  # Adding TGW Policy Table ID in response
                  response['TransitGatewayPolicyTableId'] = tgw_policy_table_id
                          
                  # We associate the Policy Table with the Peering (via the TGW Attachment ID)
                  association_state = ec2.associate_transit_gateway_policy_table(
                      TransitGatewayPolicyTableId=tgw_policy_table_id,
                      TransitGatewayAttachmentId=tgw_peering_attachment_id
                  )['Association']['State']
                  # Waiting for the association to be available
                  while association_state == "associating":
                      time.sleep(5)
                      association_state = ec2.get_transit_gateway_policy_table_associations(TransitGatewayPolicyTableId=tgw_policy_table_id)['Associations'][0]['State']
                          
                  log.info("EVERYTHING CREATED")
                  return response
              
              except Exception as e:
                  log.exception("whoops")
                  cfnresponse.send(
                      event,
                      context,
                      cfnresponse.FAILED,
                      {},
                      reason="Caught exception, check logs",
                  )

          def delete_tgw_policytable(ec2, tgw_id, tgw_peering_attachment_id, region):
              try:
                  # Initialization of the response
                  response = {}
                  
                  # We get the Transit Gateway Policy Table ID
                  tgw_policy_table_id = ec2.describe_transit_gateway_policy_tables(
                      Filters=[
                          {
                              'Name': 'transit-gateway-id',
                              'Values': [tgw_id]
                          },
                          {
                              'Name': 'state',
                              'Values': ['available']
                          },
                          {
                              'Name': 'tag-key',
                              'Values': ['Name']
                          },
                          {
                              'Name': 'tag-value',
                              'Values': [f'tgw-policy-table-{region}']
                          }
                      ]
                  )['TransitGatewayPolicyTables'][0]['TransitGatewayPolicyTableId']
                  # Adding the TGW Policy Table ID in the response
                  response['TransitGatewayPolicyTableId'] = tgw_policy_table_id
                                        
                  # We disassociate the Transit Gateway Policy Table from the Peering
                  disassociation_state = ec2.disassociate_transit_gateway_policy_table(
                      TransitGatewayPolicyTableId=tgw_policy_table_id,
                      TransitGatewayAttachmentId=tgw_peering_attachment_id
                  )['Association']['State']
                  # We wait for the disassociation to finish
                  while disassociation_state == "disassociating":
                      time.sleep(5)
                      disassociation_state = ec2.describe_transit_gateway_policy_tables(
                          TransitGatewayPolicyTableIds = [tgw_policy_table_id]
                      )["TransitGatewayPolicyTables"][0]["State"]
                      
                  # We delete the Transit Gateway Policy Table
                  delete_tgw_policy_table = ec2.delete_transit_gateway_policy_table(TransitGatewayPolicyTableId=tgw_policy_table_id)
                                              
                  log.info("EVERYTHING DELETED")
                  return response
              
              except Exception as e:
                  log.exception("whoops")
                  cfnresponse.send(
                      event,
                      context,
                      cfnresponse.FAILED,
                      {},
                      reason="Caught exception, check logs",
                  )
        
          def update_tgw_peering_attachment(ec2, tgw_id, old_tgw_peering_attachment_id, tgw_peering_attachment_id, region):
            try:
                # Initialization of the response
                response = {}
                  
                # We get the Transit Gateway Policy Table ID
                tgw_policy_table_id = ec2.describe_transit_gateway_policy_tables(
                    Filters=[
                        {
                            'Name': 'transit-gateway-id',
                            'Values': [tgw_id]
                        },
                        {
                            'Name': 'state',
                            'Values': ['available']
                        },
                        {
                            'Name': 'tag-key',
                            'Values': ['Name']
                        },
                        {
                            'Name': 'tag-value',
                            'Values': [f'tgw-policy-table-{region}']
                        }
                    ]
                )['TransitGatewayPolicyTables'][0]['TransitGatewayPolicyTableId']
                # Adding the TGW Policy Table ID in the response
                response['TransitGatewayPolicyTableId'] = tgw_policy_table_id

                # We dissassociate the Policy Table from the old Transit Gateway Peering Attachment ID
                disassociation_state = ec2.disassociate_transit_gateway_policy_table(
                    TransitGatewayPolicyTableId=tgw_policy_table_id,
                    TransitGatewayAttachmentId=old_tgw_peering_attachment_id
                )['Association']['State']
                # We wait for the disassociation to finish
                while disassociation_state == "disassociating":
                    time.sleep(5)
                    disassociation_state = ec2.describe_transit_gateway_policy_tables(
                        TransitGatewayPolicyTableIds = [tgw_policy_table_id]
                    )["TransitGatewayPolicyTables"][0]["State"]
                
                # We associate the Policy Table to the new Transit Gateway Peering Attachment ID
                association_state = ec2.associate_transit_gateway_policy_table(
                    TransitGatewayPolicyTableId=tgw_policy_table_id,
                    TransitGatewayAttachmentId=tgw_peering_attachment_id
                )['Association']['State']
                # Waiting for the association to be available
                while association_state == "associating":
                    time.sleep(5)
                    association_state = ec2.get_transit_gateway_policy_table_associations(TransitGatewayPolicyTableId=tgw_policy_table_id)['Associations'][0]['State']
                          
                log.info("EVERYTHING CREATED")
                return response
              
            except Exception as e:
                log.exception("whoops")
                cfnresponse.send(
                    event,
                    context,
                    cfnresponse.FAILED,
                    {},
                    reason="Caught exception, check logs",
                )